describe("Plugin initialization and component basic construction",function(){"use strict";it("loads jquery plugin properly",function(){expect($("<div>").datetimepicker).toBeDefined(),expect(typeof $("<div>").datetimepicker).toEqual("function"),expect($("<div>").datetimepicker.defaults).toBeDefined()}),it("creates the component with default options on an input element",function(){var e=$("<input>");$(document).find("body").append(e),expect(function(){e=e.datetimepicker()}).not.toThrow(),expect(e).not.toBe(null)}),xit("calls destroy when Element that the component is attached is removed",function(){var e,t=$("<div>").attr("class","row").append($("<div>").attr("class","col-md-12").append($("<input>")));$(document).find("body").append(t),t.datetimepicker(),e=t.data("DateTimePicker"),spyOn(e,"destroy").and.callThrough(),t.remove(),expect(e.destroy).toHaveBeenCalled()})}),describe("Public API method tests",function(){"use strict";var e,t,n,i,o,c;beforeEach(function(){n=jasmine.createSpy("dp.change event Spy"),i=jasmine.createSpy("dp.show event Spy"),o=jasmine.createSpy("dp.hide event Spy"),c=jasmine.createSpy("dp.error event Spy"),t=$("<input>").attr("id","dtp"),$(document).find("body").append($("<div>").attr("class","row").append($("<div>").attr("class","col-md-12").append(t))),$(document).find("body").on("dp.change",n),$(document).find("body").on("dp.show",i),$(document).find("body").on("dp.hide",o),$(document).find("body").on("dp.error",c),t.datetimepicker(),e=t.data("DateTimePicker")}),afterEach(function(){e.destroy(),t.remove()}),describe("configuration option name match to public api function",function(){Object.getOwnPropertyNames($.fn.datetimepicker.defaults).forEach(function(t){it("has function "+t+"()",function(){expect(e[t]).toBeDefined()})})}),describe("date() function",function(){describe("typechecking",function(){it("accepts a null",function(){expect(function(){e.date(null)}).not.toThrow()}),it("accepts a string",function(){expect(function(){e.date("2013/05/24")}).not.toThrow()}),it("accepts a Date object",function(){expect(function(){e.date(new Date)}).not.toThrow()}),it("accepts a Moment object",function(){expect(function(){e.date(moment())}).not.toThrow()}),it("does not accept undefined",function(){expect(function(){e.date(void 0)}).toThrow()}),it("does not accept a number",function(){expect(function(){e.date(0)}).toThrow()}),it("does not accept a generic Object",function(){expect(function(){e.date({})}).toThrow()}),it("does not accept a boolean",function(){expect(function(){e.date(!1)}).toThrow()})}),describe("functionality",function(){it("has no date set upon construction",function(){expect(e.date()).toBe(null)}),it("sets the date correctly",function(){var t=moment();e.date(t),expect(e.date().isSame(t)).toBe(!0)})})}),describe("format() function",function(){describe("typechecking",function(){it("accepts a false value",function(){expect(function(){e.format(!1)}).not.toThrow()}),it("accepts a string",function(){expect(function(){e.format("YYYY-MM-DD")}).not.toThrow()}),it("does not accept undefined",function(){expect(function(){e.format(void 0)}).toThrow()}),it("does not accept true",function(){expect(function(){e.format(!0)}).toThrow()}),it("does not accept a generic Object",function(){expect(function(){e.format({})}).toThrow()})}),describe("functionality",function(){it("returns no format before format is set",function(){expect(e.format()).toBe(!1)}),it("sets the format correctly",function(){e.format("YYYY-MM-DD"),expect(e.format()).toBe("YYYY-MM-DD")})})}),describe("destroy() function",function(){describe("existence",function(){it("is defined",function(){expect(e.destroy).toBeDefined()})})}),describe("toggle() function",function(){describe("existence",function(){it("is defined",function(){expect(e.toggle).toBeDefined()})})}),describe("show() function",function(){describe("existence",function(){it("is defined",function(){expect(e.show).toBeDefined()})}),describe("functionality",function(){it("emits a show event when called while widget is hidden",function(){e.show(),expect(i).toHaveBeenCalled()}),it("does not emit a show event when called and widget is already showing",function(){e.hide(),e.show(),i.calls.reset(),e.show(),expect(i).not.toHaveBeenCalled()}),it("actually shows the widget",function(){e.show(),expect($(document).find("body").find(".bootstrap-datetimepicker-widget").length).toEqual(1)})})}),describe("hide() function",function(){describe("existence",function(){it("is defined",function(){expect(e.hide).toBeDefined()})}),describe("functionality",function(){it("emits a hide event when called while widget is shown",function(){e.show(),e.hide(),expect(o).toHaveBeenCalled()}),it("does not emit a hide event when called while widget is hidden",function(){e.hide(),expect(o).not.toHaveBeenCalled()}),it("actually hides the widget",function(){e.show(),e.hide(),expect($(document).find("body").find(".bootstrap-datetimepicker-widget").length).toEqual(0)})})}),describe("disable() function",function(){describe("existence",function(){it("is defined",function(){expect(e.disable).toBeDefined()})})}),describe("enable() function",function(){describe("existence",function(){it("is defined",function(){expect(e.enable).toBeDefined()})})}),describe("options() function",function(){describe("existence",function(){it("is defined",function(){expect(e.options).toBeDefined()})})}),describe("disabledDates() function",function(){describe("existence",function(){it("is defined",function(){expect(e.disabledDates).toBeDefined()})})}),describe("enabledDates() function",function(){describe("existence",function(){it("is defined",function(){expect(e.enabledDates).toBeDefined()})})}),describe("daysOfWeekDisabled() function",function(){describe("existence",function(){it("is defined",function(){expect(e.daysOfWeekDisabled).toBeDefined()})})}),describe("maxDate() function",function(){describe("existence",function(){it("is defined",function(){expect(e.maxDate).toBeDefined()})})}),describe("minDate() function",function(){describe("existence",function(){it("is defined",function(){expect(e.minDate).toBeDefined()})})}),describe("defaultDate() function",function(){describe("existence",function(){it("is defined",function(){expect(e.defaultDate).toBeDefined()})}),describe("functionality",function(){it("returns no defaultDate before defaultDate is set",function(){expect(e.defaultDate()).toBe(!1)}),it("sets the defaultDate correctly",function(){var t=moment();e.defaultDate(t),expect(e.defaultDate().isSame(t)).toBe(!0),expect(e.date().isSame(t)).toBe(!0)}),it("triggers a change event upon setting a default date and input field is empty",function(){e.date(null),e.defaultDate(moment()),expect(n).toHaveBeenCalled()}),it("does not override input value if it already has one",function(){var t=moment();e.date(t),e.defaultDate(moment().year(2e3)),expect(e.date().isSame(t)).toBe(!0)})})}),describe("locale() function",function(){describe("functionality",function(){it("it has the same locale as the global moment locale with default options",function(){expect(e.locale()).toBe(moment.locale())}),it("it switches to a selected locale without affecting global moment locale",function(){e.locale("el"),e.date(moment()),expect(e.locale()).toBe("el"),expect(e.date().locale()).toBe("el"),expect(moment.locale()).toBe("en")})})}),describe("useCurrent() function",function(){describe("existence",function(){it("is defined",function(){expect(e.useCurrent).toBeDefined()})}),describe("check type and parameter validity",function(){it("accepts either a boolean value or string",function(){var t=["year","month","day","hour","minute"];expect(function(){e.useCurrent(!1)}).not.toThrow(),expect(function(){e.useCurrent(!0)}).not.toThrow(),t.forEach(function(t){expect(function(){e.useCurrent(t)}).not.toThrow()}),expect(function(){e.useCurrent("test")}).toThrow(),expect(function(){e.useCurrent({})}).toThrow()})}),describe("functionality",function(){it("triggers a change event upon show() and input field is empty",function(){e.useCurrent(!0),e.show(),expect(n).toHaveBeenCalled()})})}),describe("ignoreReadonly() function",function(){describe("existence",function(){it("is defined",function(){expect(e.ignoreReadonly).toBeDefined()})})}),describe("stepping() function",function(){describe("existence",function(){it("is defined",function(){expect(e.stepping).toBeDefined()})})}),describe("collapse() function",function(){describe("existence",function(){it("is defined",function(){expect(e.collapse).toBeDefined()})})}),describe("icons() function",function(){describe("existence",function(){it("is defined",function(){expect(e.icons).toBeDefined()})})}),describe("useStrict() function",function(){describe("existence",function(){it("is defined",function(){expect(e.useStrict).toBeDefined()})})}),describe("sideBySide() function",function(){describe("existence",function(){it("is defined",function(){expect(e.sideBySide).toBeDefined()})})}),describe("viewMode() function",function(){describe("existence",function(){it("is defined",function(){expect(e.viewMode).toBeDefined()})})}),describe("widgetPositioning() function",function(){describe("existence",function(){it("is defined",function(){expect(e.widgetPositioning).toBeDefined()})})}),describe("calendarWeeks() function",function(){describe("existence",function(){it("is defined",function(){expect(e.calendarWeeks).toBeDefined()})})}),describe("showTodayButton() function",function(){describe("existence",function(){it("is defined",function(){expect(e.showTodayButton).toBeDefined()})})}),describe("showClear() function",function(){describe("existence",function(){it("is defined",function(){expect(e.showClear).toBeDefined()})})}),describe("dayViewHeaderFormat() function",function(){describe("typechecking",function(){it("does not accept a false value",function(){expect(function(){e.dayViewHeaderFormat(!1)}).toThrow()}),it("accepts a string",function(){expect(function(){e.dayViewHeaderFormat("YYYY-MM-DD")}).not.toThrow()}),it("does not accept undefined",function(){expect(function(){e.dayViewHeaderFormat(void 0)}).toThrow()}),it("does not accept true",function(){expect(function(){e.dayViewHeaderFormat(!0)}).toThrow()}),it("does not accept a generic Object",function(){expect(function(){e.dayViewHeaderFormat({})}).toThrow()})}),describe("functionality",function(){it("expects dayViewHeaderFormat to be default of MMMM YYYY",function(){expect(e.dayViewHeaderFormat()).toBe("MMMM YYYY")}),it("sets the dayViewHeaderFormat correctly",function(){e.dayViewHeaderFormat("MM YY"),expect(e.dayViewHeaderFormat()).toBe("MM YY")})})}),describe("extraFormats() function",function(){describe("typechecking",function(){it("accepts a false value",function(){expect(function(){e.extraFormats(!1)}).not.toThrow()}),it("does not accept a string",function(){expect(function(){e.extraFormats("YYYY-MM-DD")}).toThrow()}),it("does not accept undefined",function(){expect(function(){e.extraFormats(void 0)}).toThrow()}),it("does not accept true",function(){expect(function(){e.extraFormats(!0)}).toThrow()}),it("accepts an Array",function(){expect(function(){e.extraFormats(["YYYY-MM-DD"])}).not.toThrow()})}),describe("functionality",function(){it("returns no extraFormats before extraFormats is set",function(){expect(e.extraFormats()).toBe(!1)}),it("sets the extraFormats correctly",function(){e.extraFormats(["YYYY-MM-DD"]),expect(e.extraFormats()[0]).toBe("YYYY-MM-DD")})})}),describe("toolbarPlacement() function",function(){describe("existence",function(){it("is defined",function(){expect(e.toolbarPlacement).toBeDefined()})}),describe("check type and parameter validity",function(){it("does not accept a false value",function(){expect(function(){e.dayViewHeaderFormat(!1)}).toThrow()}),it("does not accept a false value",function(){expect(function(){e.dayViewHeaderFormat(!1)}).toThrow()}),it("accepts a string",function(){var t=["default","top","bottom"];t.forEach(function(t){expect(function(){e.toolbarPlacement(t)}).not.toThrow()}),expect(function(){e.toolbarPlacement("test")}).toThrow(),expect(function(){e.toolbarPlacement({})}).toThrow()})})}),describe("widgetParent() function",function(){describe("typechecking",function(){it("accepts a null",function(){expect(function(){e.widgetParent(null)}).not.toThrow()}),it("accepts a string",function(){expect(function(){e.widgetParent("testDiv")}).not.toThrow()}),it("accepts a jquery object",function(){expect(function(){e.widgetParent($("#testDiv"))}).not.toThrow()}),it("does not accept undefined",function(){expect(function(){e.widgetParent(void 0)}).toThrow()}),it("does not accept a number",function(){expect(function(){e.widgetParent(0)}).toThrow()}),it("does not accept a generic Object",function(){expect(function(){e.widgetParent({})}).toThrow()}),it("does not accept a boolean",function(){expect(function(){e.widgetParent(!1)}).toThrow()})})}),describe("keepOpen() function",function(){describe("existence",function(){it("is defined",function(){expect(e.keepOpen).toBeDefined()})})}),describe("inline() function",function(){describe("existence",function(){it("is defined",function(){expect(e.inline).toBeDefined()})})}),describe("clear() function",function(){describe("existence",function(){it("is defined",function(){expect(e.clear).toBeDefined()})})}),describe("keyBinds() function",function(){describe("existence",function(){it("is defined",function(){expect(e.keyBinds).toBeDefined()})})}),describe("parseInputDate() function",function(){describe("existence",function(){it("is defined",function(){expect(e.parseInputDate).toBeDefined()})})})});