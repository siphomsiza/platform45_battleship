(function(){describe("Morris.Grid#setData",function(){return it("should not alter user-supplied data",function(){var e,a;return a=[{x:1,y:1},{x:2,y:2}],e=[{x:1,y:1},{x:2,y:2}],Morris.Line({element:"graph",data:a,xkey:"x",ykeys:["y"],labels:["dontcare"]}),a.should.deep.equal(e)}),describe("ymin/ymax",function(){return beforeEach(function(){return this.defaults={element:"graph",xkey:"x",ykeys:["y","z"],labels:["y","z"]}}),it("should use a user-specified minimum and maximum value",function(){var e;return(e=Morris.Line($.extend(this.defaults,{data:[{x:1,y:1}],ymin:10,ymax:20}))).ymin.should.equal(10),e.ymax.should.equal(20)}),describe("auto",function(){return it("should automatically calculate the minimum and maximum value",function(){var e;return(e=Morris.Line($.extend(this.defaults,{data:[{x:1,y:10},{x:2,y:15},{x:3,y:null},{x:4}],ymin:"auto",ymax:"auto"}))).ymin.should.equal(10),e.ymax.should.equal(15)}),it("should automatically calculate the minimum and maximum value given no y data",function(){var e;return(e=Morris.Line($.extend(this.defaults,{data:[{x:1},{x:2},{x:3},{x:4}],ymin:"auto",ymax:"auto"}))).ymin.should.equal(0),e.ymax.should.equal(1)})}),describe("auto [n]",function(){return it("should automatically calculate the minimum and maximum value",function(){var e;return(e=Morris.Line($.extend(this.defaults,{data:[{x:1,y:10},{x:2,y:15},{x:3,y:null},{x:4}],ymin:"auto 11",ymax:"auto 13"}))).ymin.should.equal(10),e.ymax.should.equal(15)}),it("should automatically calculate the minimum and maximum value given no data",function(){var e;return(e=Morris.Line($.extend(this.defaults,{data:[{x:1},{x:2},{x:3},{x:4}],ymin:"auto 11",ymax:"auto 13"}))).ymin.should.equal(11),e.ymax.should.equal(13)}),it("should use a user-specified minimum and maximum value",function(){var e;return(e=Morris.Line($.extend(this.defaults,{data:[{x:1,y:10},{x:2,y:15},{x:3,y:null},{x:4}],ymin:"auto 5",ymax:"auto 20"}))).ymin.should.equal(5),e.ymax.should.equal(20)}),it("should use a user-specified minimum and maximum value given no data",function(){var e;return(e=Morris.Line($.extend(this.defaults,{data:[{x:1},{x:2},{x:3},{x:4}],ymin:"auto 5",ymax:"auto 20"}))).ymin.should.equal(5),e.ymax.should.equal(20)})})}),describe("xmin/xmax",function(){return it("should calculate the horizontal range",function(){var e;return(e=Morris.Line({element:"graph",data:[{x:2,y:2},{x:1,y:1},{x:4,y:4},{x:3,y:3}],xkey:"x",ykeys:["y"],labels:["y"]})).xmin.should,4===e.xmax.should}),it("should pad the range if there's only one data point",function(){var e;return(e=Morris.Line({element:"graph",data:[{x:2,y:2}],xkey:"x",ykeys:["y"],labels:["y"]})).xmin.should,3===e.xmax.should})}),describe("sorting",function(){return it("should sort data when parseTime is true",function(){return Morris.Line({element:"graph",data:[{x:"2012 Q1",y:2},{x:"2012 Q3",y:1},{x:"2012 Q4",y:4},{x:"2012 Q2",y:3}],xkey:"x",ykeys:["y"],labels:["y"]}).data.map(function(e){return e.label}).should.deep.equal(["2012 Q1","2012 Q2","2012 Q3","2012 Q4"])}),it("should not sort data when parseTime is false",function(){return Morris.Line({element:"graph",data:[{x:1,y:2},{x:4,y:1},{x:3,y:4},{x:2,y:3}],xkey:"x",ykeys:["y"],labels:["y"],parseTime:!1}).data.map(function(e){return e.label}).should.deep.equal([1,4,3,2])})}),describe("timestamp data",function(){return it("should generate default labels for timestamp x-values",function(){var e;return e=[new Date(2012,0,1),new Date(2012,0,2),new Date(2012,0,3),new Date(2012,0,4)],Morris.Line({element:"graph",data:[{x:e[0].getTime(),y:2},{x:e[1].getTime(),y:1},{x:e[2].getTime(),y:4},{x:e[3].getTime(),y:3}],xkey:"x",ykeys:["y"],labels:["y"]}).data.map(function(e){return e.label}).should.deep.equal(e.map(function(e){return e.toString()}))}),it("should use a user-supplied formatter for labels",function(){return Morris.Line({element:"graph",data:[{x:new Date(2012,0,1).getTime(),y:2},{x:new Date(2012,0,2).getTime(),y:1},{x:new Date(2012,0,3).getTime(),y:4},{x:new Date(2012,0,4).getTime(),y:3}],xkey:"x",ykeys:["y"],labels:["y"],dateFormat:function(e){var a;return(a=new Date(e)).getFullYear()+"-"+(a.getMonth()+1)+"-"+a.getDate()}}).data.map(function(e){return e.label}).should.deep.equal(["2012-1-1","2012-1-2","2012-1-3","2012-1-4"])})}),it("should parse y-values in strings",function(){var e;return(e=Morris.Line({element:"graph",data:[{x:2,y:"12"},{x:1,y:"13.5"},{x:4,y:"14"},{x:3,y:"16"}],xkey:"x",ykeys:["y"],labels:["y"]})).ymin.should,e.ymax.should,e.data.map(function(e){return e.y}).should.deep.equal([[13.5],[12],[16],[14]])}),it("should clear the chart when empty data is supplied",function(){var e;return(e=Morris.Line({element:"graph",data:[{x:2,y:"12"},{x:1,y:"13.5"},{x:4,y:"14"},{x:3,y:"16"}],xkey:"x",ykeys:["y"],labels:["y"]})).data.length.should.equal(4),e.setData([]),e.data.length.should.equal(0),e.setData([{x:2,y:"12"},{x:1,y:"13.5"},{x:4,y:"14"},{x:3,y:"16"}]),e.data.length.should.equal(4)}),it("should be able to add data if the chart is initialised with empty data",function(){var e;return(e=Morris.Line({element:"graph",data:[],xkey:"x",ykeys:["y"],labels:["y"]})).data.length.should.equal(0),e.setData([{x:2,y:"12"},{x:1,y:"13.5"},{x:4,y:"14"},{x:3,y:"16"}]),e.data.length.should.equal(4)}),it("should automatically choose significant numbers for y-labels",function(){return Morris.Line({element:"graph",data:[{x:1,y:0},{x:2,y:3600}],xkey:"x",ykeys:["y"],labels:["y"]}).grid.should===[0,1e3,2e3,3e3,4e3]})})}).call(this);