!function(i,a){i.ghcommits={repo_name:"mjaalnir/bootstrap-colorpicker",cache_enabled:!0,cache_ttl:7200,onload:{},callback:function(){},load:function(o,t){var a=this;if(o=o||10,a.onload=t||function(){},a.cache_enabled&&i.localStorage){var e="repo_commits",c=localStorage.getItem(e+"_expiration");c&&c<+new Date&&(localStorage.removeItem(e),localStorage.removeItem(e+"_expiration"),c=!1);var n=localStorage.getItem(e);if(n)return i.console&&console.info("Commit data feched from localStorage"),a.store(JSON.parse(n),!1),void a.onload(a.data)}a.query(o)},store:function(o,t){var a=this;a.data=o,t&&i.localStorage&&(localStorage.setItem("repo_commits",JSON.stringify(o)),localStorage.setItem("repo_commits_expiration",+new Date+1e3*a.cache_ttl))},query:function(o){var t="https://api.github.com/repos/"+this.repo_name+"/commits?per_page="+o;console.info("Fetching commit data from "+t),a.ajax({dataType:"jsonp",url:t,jsonpCallback:"ghcommits._jsonpcb"})},_jsonpcb:function(o){ghcommits.store(o.data,ghcommits.cache_enabled),ghcommits.onload(ghcommits.data)}},a(function(){try{ghcommits.load(10,function(o){o&&0<o.length&&a(o).each(function(o,t){a("#changelog ul").append(a("<li>").html("<b>"+t.commit.author.date.replace("T"," ").replace("Z","")+":</b> "+t.commit.message))})})}catch(o){}})}(window,window.jQuery);