!function(o,t){o.ghcommits={repo_name:"mjaalnir/bootstrap-colorpicker",cache_enabled:!0,cache_ttl:7200,onload:{},callback:function(){},load:function(t,a){var e=this;if(t=t||10,e.onload=a||function(){},e.cache_enabled&&o.localStorage){var c="repo_commits",n=localStorage.getItem(c+"_expiration");n&&n<+new Date&&(localStorage.removeItem(c),localStorage.removeItem(c+"_expiration"),n=!1);var i=localStorage.getItem(c);if(i)return o.console&&console.info("Commit data feched from localStorage"),e.store(JSON.parse(i),!1),void e.onload(e.data)}e.query(t)},store:function(t,a){var e=this;e.data=t,a&&o.localStorage&&(localStorage.setItem("repo_commits",JSON.stringify(t)),localStorage.setItem("repo_commits_expiration",+new Date+1e3*e.cache_ttl))},query:function(o){var a=this,e="https://api.github.com/repos/"+a.repo_name+"/commits?per_page="+o;console.info("Fetching commit data from "+e),t.ajax({dataType:"jsonp",url:e,jsonpCallback:"ghcommits._jsonpcb"})},_jsonpcb:function(o){ghcommits.store(o.data,ghcommits.cache_enabled),ghcommits.onload(ghcommits.data)}},t(function(){try{ghcommits.load(10,function(o){o&&o.length>0&&t(o).each(function(o,a){t("#changelog ul").append(t("<li>").html("<b>"+a.commit.author.date.replace("T"," ").replace("Z","")+":</b> "+a.commit.message))})})}catch(o){}})}(window,window.jQuery);